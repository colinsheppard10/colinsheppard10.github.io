{"version":3,"sources":["components/Excercise/exercise.tsx","components/Excercise/exerciseCounter.tsx","components/countDisplay.tsx","components/Body/bodyContainer.tsx","components/MyComp.tsx","App.js","reportWebVitals.js","index.js"],"names":["PoseType","countExercise","poseLandmarks","exercise","anchors","anchor1","anchor2","p1","p2","y","findBinary","Exercise","name","angles","reps","type","this","upper","BINARY","CountDislay","repCompletionPercent","exerciseName","set","count","resetWorkout","CountContainer","onClick","transitionDuration","completed","InfoContainer","NameContainer","styled","div","BodyContainer","useState","inputVideoReady","setInputVideoReady","loaded","setLoaded","inputVideoRef","useRef","canvasRef","contextRef","direction","exerciseSelectionIndex","activeExercise","exerciseProgress","setExerciseProgress","activeExerciseRef","current","setRepCompletionPercent","exerciseSelection","setExerciseSelection","useEffect","getContext","navigator","mediaDevices","getUserMedia","video","width","min","height","then","stream","srcObject","sendToMediaPipe","pose","Pose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","onResults","a","videoWidth","requestAnimationFrame","send","image","results","save","clearRect","drawImage","drawConnectors","POSE_CONNECTIONS","color","lineWidth","drawLandmarks","restore","length","index","workoutStarted","MainContainer","WorkoutSelection","WorkoutItem","Title","map","workoutKey","Math","random","prevExerciseSelection","workoutIndex","prevExercise","filter","ex","autoPlay","ref","el","window","screen","availWidth","availHeight","className","MyComp","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4GAAYA,E,sGC8BGC,EARO,SAACC,EAAoBC,GAAwB,IAAD,cACvCA,EAASC,QAD8B,GAC3DC,EAD2D,KAClDC,EADkD,KAKhE,OAfiB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,GAIxB,OAHgBD,EAAVE,EACUD,EAAVC,EAGG,EAEA,IAOkBC,CAAW,CAAEH,GAF/BL,EAAcG,GAEqBG,GADnCN,EAAcI,M,kBDzBbN,K,gBAAAA,E,eAAAA,M,KAKL,IAAMW,EAOX,cAAuD,IAA1CC,EAAyC,EAAzCA,KAAMR,EAAmC,EAAnCA,QAASS,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,KAAY,yBANtDX,aAMsD,OALtDS,YAKsD,OAJtDD,UAIsD,OAHtDG,UAGsD,OAFtDD,UAEsD,EACpDE,KAAKJ,KAAOA,EACZI,KAAKZ,QAAUA,EACfY,KAAKH,OAASA,EACdG,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,GAIHE,EAAQ,CAEnB,IAAIN,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,EAAG,GAAI,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAC/F,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,EAAG,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAC/F,IAAIP,EAAS,CAAEC,KAAM,QAASR,QAAS,CAAC,GAAI,GAAI,IAAKS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAChG,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,EAAG,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAC/F,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,GAAI,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAChG,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,EAAG,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAC/F,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,GAAI,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAChG,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,GAAI,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAChG,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,GAAI,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAChG,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,GAAI,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,SAChG,IAAIP,EAAS,CAAEC,KAAM,SAAUR,QAAS,CAAC,GAAI,GAAI,GAAIS,OAAQ,CAAC,EAAG,KAAMC,KAAM,GAAIC,KAAMf,EAASkB,U,ylBE7BlG,IAceC,EAdK,SAAC,GAA2E,IAAzEC,EAAwE,EAAxEA,qBAAsBC,EAAkD,EAAlDA,aAAcC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,aACrE,OAAO,eAACC,EAAD,CACLC,QAASF,EADJ,UAGL,cAAC,IAAD,CACEG,mBAAoB,MACpBC,UAAWR,IAEb,cAACS,EAAD,sBAAqBP,KACrB,cAACO,EAAD,sBAAqBN,KACrB,cAACO,EAAD,UAAgBT,QAOdI,EAAiBM,IAAOC,IAAV,KAQdH,EAAgBE,IAAOC,IAAV,KAQbF,EAAgBC,IAAOC,IAAV,K,0cCzBnB,IA4OeC,EA5OO,WAAO,IAAD,EACoBC,oBAAS,GAD7B,mBACnBC,EADmB,KACFC,EADE,OAEEF,oBAAS,GAFX,mBAEnBG,EAFmB,KAEXC,EAFW,KAGpBC,EAAgBC,iBAAgC,MAChDC,EAAYD,iBAA0B,MACtCE,EAAaF,iBAAwC,MALjC,EAMsBN,mBAAS,CACvDS,UAAW,EACXpB,MAAO,EACPD,IAAK,EACLsB,wBAAyB,EACzBC,gBAAiB,IAXO,mBAMnBC,EANmB,KAMDC,EANC,KAmBpBC,EAAoBR,iBAAO,CAC/BK,gBAAiB,EACjBtB,OAAQ,EACRD,KAAM,IAER0B,EAAkBC,QAAU,CAC1BJ,eAAgBC,EAAiBD,eACjCtB,MAAO,EACPD,IAAK,GA3BmB,MA8B8BY,mBAAS,GA9BvC,mBA8BnBd,EA9BmB,KA8BG8B,EA9BH,OA+BwBhB,mBAAS,IA/BjC,mBA+BnBiB,EA/BmB,KA+BAC,EA/BA,KAiC1BC,qBAAU,WACR,GAAIlB,GAAmBI,EAAcU,SAAWR,EAAUQ,QAAS,CACjEP,EAAWO,QAAUR,EAAUQ,QAAQK,WAAW,MAIlDC,UAAUC,aAAaC,aAHH,CAClBC,MAAO,CAAEC,MAAO,CAAEC,IAAK,MAAQC,OAAQ,CAAED,IAAK,QAECE,MAAK,SAACC,GACjDxB,EAAcU,UAChBV,EAAcU,QAAQe,UAAYD,GAEpCE,OAGF,IAAMC,EAAO,IAAIC,OAAK,CACpBC,WAAY,SAACC,GACX,MAAM,gDAAN,OAAuDA,MAG3DH,EAAKI,WAAW,CACdC,gBAAiB,EACjBC,iBAAiB,EACjBC,oBAAoB,EACpBC,oBAAoB,EACpBC,uBAAwB,GACxBC,sBAAuB,KAEzBV,EAAKW,UAAUA,GAEf,IAAMZ,EAAe,uCAAG,sBAAAa,EAAA,0DAClBvC,EAAcU,QADI,mBAEfV,EAAcU,QAAQ8B,WAFP,gBAIlBC,sBAAsBf,GAJJ,sCAMZC,EAAKe,KAAK,CAAEC,MAAO3C,EAAcU,UANrB,OAOlB+B,sBAAsBf,GAPJ,2CAAH,wDAYtB,CAAC9B,IAEJ,IAAM0C,EAAY,SAACM,GACjB,GAAI1C,EAAUQ,SAAWP,EAAWO,QAAS,CAAC,IAAD,EAC3CX,GAAU,GAEVI,EAAWO,QAAQmC,OACnB1C,EAAWO,QAAQoC,UACjB,EACA,EACA5C,EAAUQ,QAAQU,MAClBlB,EAAUQ,QAAQY,QAEpBnB,EAAWO,QAAQqC,UACjBH,EAAQD,MACR,EACA,EACAzC,EAAUQ,QAAQU,MAClBlB,EAAUQ,QAAQY,QAGpB0B,yBAAe7C,EAAWO,QAASkC,EAAQjF,cAAesF,mBACxD,CAAEC,MAAO,UAAWC,UAAW,IACjCC,wBAAcjD,EAAWO,QAASkC,EAAQjF,cACxC,CAAEuF,MAAO,UAAWC,UAAW,IAEjChD,EAAWO,QAAQ2C,UAvBwB,IAwBrC1F,EAAkBiF,EAAlBjF,cACFA,IAAiB,UAAA8C,EAAkBC,eAAlB,eAA2BJ,iBAAkB,GAChEK,EAAwBjD,EAAcC,EAAee,EAAM+B,EAAkBC,QAAQJ,oBAK3FQ,qBAAU,WAAO,IACTV,EAAkEG,EAAlEH,UAAWpB,EAAuDuB,EAAvDvB,MAAOD,EAAgDwB,EAAhDxB,IAAKsB,EAA2CE,EAA3CF,uBAAwBC,EAAmBC,EAAnBD,eACxB,MAAzBzB,EACgB,IAAduB,IACFpB,IACAoB,EAAY,GAEoB,IAAzBvB,GACS,IAAduB,IACFA,EAAY,GAIhB,IAAIxC,EAAWc,EAAM4B,GACjB1C,IACEoB,GAASpB,EAASW,MAAsB,IAAd6B,IACxBC,EAAyBO,EAAkB0C,OAAS,EACtDjD,KAEAtB,IACAsB,EAAyB,GAE3BrB,EAAQ,GAGVsB,EAAiBM,EAAkBP,GAAwBkD,MAC3D/C,EAAoB,CAAEJ,YAAWpB,QAAOD,MAAKsB,yBAAwBC,sBAGtE,CAACzB,IAxIsB,IA2IpBE,EAAuDwB,EAAvDxB,IAAKC,EAAkDuB,EAAlDvB,MAA+BsB,GAAmBC,EAA3CF,uBAA2CE,EAAnBD,gBACtCkD,EAAiBlD,GAAkB,EACvC,OACE,eAACmD,EAAD,WACID,EA0DE,cAAC,EAAD,CACA3E,qBAAsBA,EACtBC,aAAcJ,EAAM4B,GAAgBjC,KACpCU,IAAKA,EACLC,MAAOA,EACPC,aAAc,WACZuB,EAAoB,CAClBJ,UAAW,EACXpB,MAAO,EACPD,IAAK,EACLsB,wBAAyB,EACzBC,gBAAiB,OApEvB,qCACE,eAACoD,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,+BAGClF,EAAMmF,KAAI,SAACjG,EAAU2F,GACpB,OAAO,qBAELpE,QAAS,WACP,IAAI2E,EAAaC,KAAKC,SACtBnD,GAAqB,SAACoD,GACpB,MAAM,GAAN,mBAAWA,GAAX,CAAkC,CAAEH,aAAYP,eAL/C,SAQL3F,EAASS,MAPJkF,SAUX,eAACI,EAAD,WACE,cAACC,EAAD,iCAGChD,EAAkBiD,KAAI,SAACjG,EAAe2F,GAAmB,IAClDO,EAAqClG,EAArCkG,WAAmBI,EAAkBtG,EAAzB2F,MAClB,OAAO,qBAELpE,QAAS,WACP0B,GAAqB,SAACsD,GAEpB,OADkBA,EAAaC,QAAO,SAACC,GAAD,OAAQA,EAAGP,aAAeA,SAJ/D,mBASDP,EATC,cASU7E,EAAMwF,GAAwB7F,OARxCkF,YAab,cAACG,EAAD,UACE,cAACC,EAAD,CACExE,QAAS,WACHyB,EAAkB0C,QACpB9C,EAAoB,CAClBJ,UAAW,EACXpB,MAAO,EACPD,IAAK,EACLsB,uBAAwB,EACxBC,eAAgBM,EAAkB,GAAG2C,SAR7C,qBAcF,2BAoBJ,gCACE,uBACEe,UAAQ,EACRhD,OAAQ,EACRF,MAAO,EACPmD,IAAK,SAACC,GACJxE,EAAcU,QAAU8D,EACxB3E,IAAqB2E,MAGzB,wBAAQD,IAAKrE,EAAWkB,MAAOqD,OAAOC,OAAOC,YAAc,EAAI,GAAIrD,OAAQmD,OAAOC,OAAOE,aAAe,EAAI,MAC1G9E,GACA,qBAAK+E,UAAU,UAAf,4BASJpB,EAAgBjE,IAAOC,IAAV,KAIbmE,EAAQpE,IAAOC,IAAV,KAILiE,EAAmBlE,IAAOC,IAAV,KAKhBkE,EAAcnE,IAAOC,IAAV,KC9PFqF,EAJA,WACb,OAAO,cAAC,EAAD,KCEMC,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3D,MAAK,YAAkD,IAA/C4D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4189ea52.chunk.js","sourcesContent":["export enum PoseType {\n  BINARY = 'BINARY',\n  ANGLE = 'ANGLE'\n}\n\nexport class Exercise {\n  anchors: number[];\n  angles: number[];\n  name: string;\n  type: PoseType;\n  reps: number;\n\n  constructor({name, anchors, angles, reps, type}: any) {\n    this.name = name;\n    this.anchors = anchors;\n    this.angles = angles;\n    this.reps = reps;\n    this.type = type;\n  }\n}\n\nexport const upper = [\n  // new Exercise({ name: 'CURLS', anchors: [12, 14, 16], angles: [210, 310], reps: 10, startInverted: false, type: PoseType.ANGLE }),\n  new Exercise({ name: 'PUL UP', anchors: [6, 16, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'PSH UP', anchors: [14, 6, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'CURLS', anchors: [12, 14, 16], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'SHD PR', anchors: [16, 0, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'SID RS', anchors: [16, 12, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'OVR HD', anchors: [16, 6, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'PL DWN', anchors: [16, 14, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'JMP ST', anchors: [24, 26, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'SLT ST', anchors: [16, 12, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: 'BND ST', anchors: [24, 26, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n  new Exercise({ name: '1LG ST', anchors: [24, 26, 0], angles: [0, 100], reps: 10, type: PoseType.BINARY }),\n]\n","import { Exercise } from \"./exercise\";\n\nconst findAngle = ({ p1, p2, p3 }: any) => {\n  let { x: x1, y: y1 } = p1;\n  let { x: x2, y: y2 } = p2;\n  let { x: x3, y: y3 } = p2;\n\n  let radians = Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y1 - y2, x1 - x2)\n  let degrees = radians * (180 / Math.PI)\n  return degrees;\n}\n\nconst findBinary = ({ p1, p2 }: any): number => {\n  let { y: y1 } = p1;\n  let { y: y2 } = p2;\n\n  if (y1 > y2)\n    return 0;\n  else\n    return 100;\n}\n\nconst countExercise = (poseLandmarks: any, exercise: Exercise) => {\n  let [anchor1, anchor2] = exercise.anchors\n  let p1 = poseLandmarks[anchor1]\n  let p2 = poseLandmarks[anchor2]\n  let repCompletionPercent = findBinary({ p1, p2 });\n  return repCompletionPercent\n}\n\nexport default countExercise;","import ProgressBar from \"@ramonak/react-progress-bar\"\nimport styled from 'styled-components';\n\n\nconst CountDislay = ({ repCompletionPercent, exerciseName, set, count, resetWorkout }: any) => {\n  return <CountContainer\n    onClick={resetWorkout}\n  >\n    <ProgressBar\n      transitionDuration={'.5s'}\n      completed={repCompletionPercent}\n    />\n    <InfoContainer>{`S:${set}`}</InfoContainer>\n    <InfoContainer>{`R:${count}`}</InfoContainer>\n    <NameContainer>{exerciseName}</NameContainer>\n  </CountContainer>\n}\n\nexport default CountDislay\n\n\nconst CountContainer = styled.div`\n  width: 100vw;\n  height: 93vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 23vh;\n  font-weight: bold;\n  font-family: 'Dosis', sans-serif;\n`;\n\nconst NameContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 16vh;\n  font-weight: bold;\n  font-family: 'Dosis', sans-serif;\n`;","import { useEffect, useRef, useState } from 'react';\nimport {\n  drawConnectors,\n  drawLandmarks,\n} from '@mediapipe/drawing_utils';\nimport { Pose, POSE_CONNECTIONS, Results } from '@mediapipe/pose';\nimport countExercise from '../Excercise/exerciseCounter';\nimport { Exercise, upper } from '../Excercise/exercise';\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport CountDislay from '../countDisplay';\nimport styled from 'styled-components';\n\nconst BodyContainer = () => {\n  const [inputVideoReady, setInputVideoReady] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const inputVideoRef = useRef<HTMLVideoElement | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const contextRef = useRef<CanvasRenderingContext2D | null>(null);\n  const [exerciseProgress, setExerciseProgress] = useState({\n    direction: 0,\n    count: 0,\n    set: 0,\n    exerciseSelectionIndex: -1,\n    activeExercise: -1\n  } as {\n    direction: number;\n    count: number;\n    set: number;\n    exerciseSelectionIndex: number,\n    activeExercise: number;\n  })\n  const activeExerciseRef = useRef({\n    activeExercise: -1,\n    count: -1,\n    set: -1\n  });\n  activeExerciseRef.current = {\n    activeExercise: exerciseProgress.activeExercise,\n    count: 1,\n    set: 1\n  }\n\n  const [repCompletionPercent, setRepCompletionPercent] = useState(0);\n  const [exerciseSelection, setExerciseSelection] = useState([] as any)\n\n  useEffect(() => {\n    if (inputVideoReady && inputVideoRef.current && canvasRef.current) {\n      contextRef.current = canvasRef.current.getContext('2d');\n      const constraints = {\n        video: { width: { min: 1280 }, height: { min: 720 } },\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n        if (inputVideoRef.current) {\n          inputVideoRef.current.srcObject = stream;\n        }\n        sendToMediaPipe();\n      });\n\n      const pose = new Pose({\n        locateFile: (file: any) => {\n          return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n        }\n      });\n      pose.setOptions({\n        modelComplexity: 1,\n        smoothLandmarks: true,\n        enableSegmentation: true,\n        smoothSegmentation: true,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      });\n      pose.onResults(onResults);\n\n      const sendToMediaPipe = async () => {\n        if (inputVideoRef.current) {\n          if (!inputVideoRef.current.videoWidth) {\n            //console.log(inputVideoRef.current.videoWidth);\n            requestAnimationFrame(sendToMediaPipe);\n          } else {\n            await pose.send({ image: inputVideoRef.current });\n            requestAnimationFrame(sendToMediaPipe);\n          }\n        }\n      };\n    }\n  }, [inputVideoReady]);\n\n  const onResults = (results: Results) => {\n    if (canvasRef.current && contextRef.current) {\n      setLoaded(true);\n\n      contextRef.current.save();\n      contextRef.current.clearRect(\n        0,\n        0,\n        canvasRef.current.width,\n        canvasRef.current.height\n      );\n      contextRef.current.drawImage(\n        results.image,\n        0,\n        0,\n        canvasRef.current.width,\n        canvasRef.current.height\n      );\n\n      drawConnectors(contextRef.current, results.poseLandmarks, POSE_CONNECTIONS,\n        { color: '#00FF00', lineWidth: 4 });\n      drawLandmarks(contextRef.current, results.poseLandmarks,\n        { color: '#FF0000', lineWidth: 2 });\n\n      contextRef.current.restore();\n      let { poseLandmarks } = results\n      if (poseLandmarks && activeExerciseRef.current?.activeExercise >= 0) {\n        setRepCompletionPercent(countExercise(poseLandmarks, upper[activeExerciseRef.current.activeExercise]));\n      }\n    }\n  };\n\n  useEffect(() => {\n    let { direction, count, set, exerciseSelectionIndex, activeExercise } = exerciseProgress\n    if (repCompletionPercent === 100) {\n      if (direction === 0) {\n        count++;\n        direction = 1\n      }\n    } else if (repCompletionPercent === 0) {\n      if (direction === 1) {\n        direction = 0\n      }\n    }\n\n    let exercise = upper[activeExercise]\n    if (exercise) {\n      if (count >= exercise.reps && direction === 0) {\n        if (exerciseSelectionIndex < exerciseSelection.length - 1)\n          exerciseSelectionIndex++;\n        else {\n          set++;\n          exerciseSelectionIndex = 0;\n        }\n        count = 0;\n      }\n\n      activeExercise = exerciseSelection[exerciseSelectionIndex].index;\n      setExerciseProgress({ direction, count, set, exerciseSelectionIndex, activeExercise })\n    }\n\n  }, [repCompletionPercent])\n\n\n  let { set, count, exerciseSelectionIndex, activeExercise } = exerciseProgress\n  let workoutStarted = activeExercise > -1;\n  return (\n    <MainContainer>\n      {!workoutStarted ?\n        <>\n          <WorkoutSelection>\n            <WorkoutItem>\n              <Title>\n                WORKOUT OPTIONS:\n              </Title>\n              {upper.map((exercise, index) => {\n                return <div\n                  key={index}\n                  onClick={() => {\n                    let workoutKey = Math.random();\n                    setExerciseSelection((prevExerciseSelection: any[]) => {\n                      return [...prevExerciseSelection, { workoutKey, index }];\n                    })\n                  }}\n                >{exercise.name}</div>\n              })}\n            </WorkoutItem>\n            <WorkoutItem>\n              <Title>\n                CURRENT SELECTION:\n              </Title>\n              {exerciseSelection.map((exercise: any, index: number) => {\n                let { workoutKey, index: workoutIndex, } = exercise\n                return <div\n                  key={index}\n                  onClick={() => {\n                    setExerciseSelection((prevExercise: any[]) => {\n                      let newExercise = prevExercise.filter((ex) => ex.workoutKey !== workoutKey)\n                      return newExercise\n                    })\n                  }}\n                >\n                  {`${index} - ${upper[workoutIndex as number].name}`}\n                </div>\n              })}\n            </WorkoutItem>\n          </WorkoutSelection>\n          <WorkoutSelection>\n            <WorkoutItem\n              onClick={() => {\n                if (exerciseSelection.length)\n                  setExerciseProgress({\n                    direction: 0,\n                    count: 0,\n                    set: 0,\n                    exerciseSelectionIndex: 0,\n                    activeExercise: exerciseSelection[0].index\n                  })\n              }}\n            >start\n            </WorkoutItem>\n          </WorkoutSelection>\n          <div>\n          </div>\n        </>\n\n        : <CountDislay\n          repCompletionPercent={repCompletionPercent}\n          exerciseName={upper[activeExercise].name}\n          set={set}\n          count={count}\n          resetWorkout={() => {\n            setExerciseProgress({\n              direction: 0,\n              count: 0,\n              set: 0,\n              exerciseSelectionIndex: -1,\n              activeExercise: -1\n            })\n          }}\n        />}\n\n      <div>\n        <video\n          autoPlay\n          height={0}\n          width={0}\n          ref={(el) => {\n            inputVideoRef.current = el;\n            setInputVideoReady(!!el);\n          }}\n        />\n        <canvas ref={canvasRef} width={window.screen.availWidth * (3 / 4)} height={window.screen.availHeight * (3 / 4)} />\n        {!loaded && (\n          <div className=\"message\">Loading</div>\n        )}\n      </div>\n    </MainContainer>\n  );\n};\n\nexport default BodyContainer;\n\nconst MainContainer = styled.div`\n  text-transform: uppercase;\n`;\n\nconst Title = styled.div`\n  border-bottom: 1rem solid;\n`;\n\nconst WorkoutSelection = styled.div`\n  font-size: 5vh;\n  display: flex;\n`;\n\nconst WorkoutItem = styled.div`\n  text-align: center;\n  font-family: 'Dosis', sans-serif;\n  flex-grow: 1;\n`;","// import BodyContainer from \"./Body/bodyContainer\";\nimport BodyContainer from \"./Body/bodyContainer\";\nimport CountDislay from \"./countDisplay\";\nimport DeleteComp from \"./delete\";\n\nconst MyComp = () => {\n  return <BodyContainer/>\n}\n\nexport default MyComp;","import MyComp from './components/MyComp'\n\nfunction App() {\n  return (\n    <MyComp/>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}